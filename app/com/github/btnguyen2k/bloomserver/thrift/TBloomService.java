/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.btnguyen2k.bloomserver.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBloomService {

  public interface Iface {

    /**
     * "Ping" the server. This method is to test if server is reachable.
     */
    public void ping() throws org.apache.thrift.TException;

    /**
     * "Ping" the server. This method is to test if server is reachable.
     */
    public boolean ping2() throws org.apache.thrift.TException;

    /**
     * Puts an item to a bloom filter specified by a name.
     * 
     * @param _bloomName
     * @param _item
     * @return
     * 
     * @param _bloomName
     * @param _item
     */
    public TBloomResponse put(String _bloomName, String _item) throws org.apache.thrift.TException;

    /**
     * Tests if an item exists in a specified bloom filter.
     * 
     * @param _bloomName
     * @param _item
     * @return
     * 
     * @param _bloomName
     * @param _item
     */
    public TBloomResponse mightContain(String _bloomName, String _item) throws org.apache.thrift.TException;

    /**
     * Creates and Initializes a new bloom filter.
     * 
     * @param _secret
     * @param _bloomName
     * @param _numItems
     * @param _expectedFpp
     * @param _force set to {@code true} to force overriding existing bloom filter
     * @param _counting (not supported yet)
     * @param _scaling (not supported yet)
     * 
     * @param _secret
     * @param _bloomName
     * @param _numItems
     * @param _expectedFpp
     * @param _force
     * @param _counting
     * @param _scaling
     */
    public TBloomResponse initBloom(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping2(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void put(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mightContain(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void initBloom(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean ping2() throws org.apache.thrift.TException
    {
      send_ping2();
      return recv_ping2();
    }

    public void send_ping2() throws org.apache.thrift.TException
    {
      ping2_args args = new ping2_args();
      sendBase("ping2", args);
    }

    public boolean recv_ping2() throws org.apache.thrift.TException
    {
      ping2_result result = new ping2_result();
      receiveBase(result, "ping2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping2 failed: unknown result");
    }

    public TBloomResponse put(String _bloomName, String _item) throws org.apache.thrift.TException
    {
      send_put(_bloomName, _item);
      return recv_put();
    }

    public void send_put(String _bloomName, String _item) throws org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.set_bloomName(_bloomName);
      args.set_item(_item);
      sendBase("put", args);
    }

    public TBloomResponse recv_put() throws org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "put failed: unknown result");
    }

    public TBloomResponse mightContain(String _bloomName, String _item) throws org.apache.thrift.TException
    {
      send_mightContain(_bloomName, _item);
      return recv_mightContain();
    }

    public void send_mightContain(String _bloomName, String _item) throws org.apache.thrift.TException
    {
      mightContain_args args = new mightContain_args();
      args.set_bloomName(_bloomName);
      args.set_item(_item);
      sendBase("mightContain", args);
    }

    public TBloomResponse recv_mightContain() throws org.apache.thrift.TException
    {
      mightContain_result result = new mightContain_result();
      receiveBase(result, "mightContain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mightContain failed: unknown result");
    }

    public TBloomResponse initBloom(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling) throws org.apache.thrift.TException
    {
      send_initBloom(_secret, _bloomName, _numItems, _expectedFpp, _force, _counting, _scaling);
      return recv_initBloom();
    }

    public void send_initBloom(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling) throws org.apache.thrift.TException
    {
      initBloom_args args = new initBloom_args();
      args.set_secret(_secret);
      args.set_bloomName(_bloomName);
      args.set_numItems(_numItems);
      args.set_expectedFpp(_expectedFpp);
      args.set_force(_force);
      args.set_counting(_counting);
      args.set_scaling(_scaling);
      sendBase("initBloom", args);
    }

    public TBloomResponse recv_initBloom() throws org.apache.thrift.TException
    {
      initBloom_result result = new initBloom_result();
      receiveBase(result, "initBloom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initBloom failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void ping2(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping2_call method_call = new ping2_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping2_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping2_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping2_args args = new ping2_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping2();
      }
    }

    public void put(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(_bloomName, _item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _bloomName;
      private String _item;
      public put_call(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._bloomName = _bloomName;
        this._item = _item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.set_bloomName(_bloomName);
        args.set_item(_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBloomResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_put();
      }
    }

    public void mightContain(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mightContain_call method_call = new mightContain_call(_bloomName, _item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mightContain_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _bloomName;
      private String _item;
      public mightContain_call(String _bloomName, String _item, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._bloomName = _bloomName;
        this._item = _item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mightContain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mightContain_args args = new mightContain_args();
        args.set_bloomName(_bloomName);
        args.set_item(_item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBloomResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mightContain();
      }
    }

    public void initBloom(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initBloom_call method_call = new initBloom_call(_secret, _bloomName, _numItems, _expectedFpp, _force, _counting, _scaling, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initBloom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _secret;
      private String _bloomName;
      private long _numItems;
      private double _expectedFpp;
      private boolean _force;
      private boolean _counting;
      private boolean _scaling;
      public initBloom_call(String _secret, String _bloomName, long _numItems, double _expectedFpp, boolean _force, boolean _counting, boolean _scaling, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._secret = _secret;
        this._bloomName = _bloomName;
        this._numItems = _numItems;
        this._expectedFpp = _expectedFpp;
        this._force = _force;
        this._counting = _counting;
        this._scaling = _scaling;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initBloom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initBloom_args args = new initBloom_args();
        args.set_secret(_secret);
        args.set_bloomName(_bloomName);
        args.set_numItems(_numItems);
        args.set_expectedFpp(_expectedFpp);
        args.set_force(_force);
        args.set_counting(_counting);
        args.set_scaling(_scaling);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TBloomResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initBloom();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("ping2", new ping2());
      processMap.put("put", new put());
      processMap.put("mightContain", new mightContain());
      processMap.put("initBloom", new initBloom());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        iface.ping();
        return null;
      }
    }

    public static class ping2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping2_args> {
      public ping2() {
        super("ping2");
      }

      public ping2_args getEmptyArgsInstance() {
        return new ping2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping2_result getResult(I iface, ping2_args args) throws org.apache.thrift.TException {
        ping2_result result = new ping2_result();
        result.success = iface.ping2();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
        put_result result = new put_result();
        result.success = iface.put(args._bloomName, args._item);
        return result;
      }
    }

    public static class mightContain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mightContain_args> {
      public mightContain() {
        super("mightContain");
      }

      public mightContain_args getEmptyArgsInstance() {
        return new mightContain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mightContain_result getResult(I iface, mightContain_args args) throws org.apache.thrift.TException {
        mightContain_result result = new mightContain_result();
        result.success = iface.mightContain(args._bloomName, args._item);
        return result;
      }
    }

    public static class initBloom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initBloom_args> {
      public initBloom() {
        super("initBloom");
      }

      public initBloom_args getEmptyArgsInstance() {
        return new initBloom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initBloom_result getResult(I iface, initBloom_args args) throws org.apache.thrift.TException {
        initBloom_result result = new initBloom_result();
        result.success = iface.initBloom(args._secret, args._bloomName, args._numItems, args._expectedFpp, args._force, args._counting, args._scaling);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("ping2", new ping2());
      processMap.put("put", new put());
      processMap.put("mightContain", new mightContain());
      processMap.put("initBloom", new initBloom());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class ping2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping2_args, Boolean> {
      public ping2() {
        super("ping2");
      }

      public ping2_args getEmptyArgsInstance() {
        return new ping2_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping2_result result = new ping2_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping2_result result = new ping2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping2_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping2(resultHandler);
      }
    }

    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, TBloomResponse> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      public AsyncMethodCallback<TBloomResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TBloomResponse>() { 
          public void onComplete(TBloomResponse o) {
            put_result result = new put_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            put_result result = new put_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<TBloomResponse> resultHandler) throws TException {
        iface.put(args._bloomName, args._item,resultHandler);
      }
    }

    public static class mightContain<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mightContain_args, TBloomResponse> {
      public mightContain() {
        super("mightContain");
      }

      public mightContain_args getEmptyArgsInstance() {
        return new mightContain_args();
      }

      public AsyncMethodCallback<TBloomResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TBloomResponse>() { 
          public void onComplete(TBloomResponse o) {
            mightContain_result result = new mightContain_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mightContain_result result = new mightContain_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mightContain_args args, org.apache.thrift.async.AsyncMethodCallback<TBloomResponse> resultHandler) throws TException {
        iface.mightContain(args._bloomName, args._item,resultHandler);
      }
    }

    public static class initBloom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initBloom_args, TBloomResponse> {
      public initBloom() {
        super("initBloom");
      }

      public initBloom_args getEmptyArgsInstance() {
        return new initBloom_args();
      }

      public AsyncMethodCallback<TBloomResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TBloomResponse>() { 
          public void onComplete(TBloomResponse o) {
            initBloom_result result = new initBloom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initBloom_result result = new initBloom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initBloom_args args, org.apache.thrift.async.AsyncMethodCallback<TBloomResponse> resultHandler) throws TException {
        iface.initBloom(args._secret, args._bloomName, args._numItems, args._expectedFpp, args._force, args._counting, args._scaling,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping2_args implements org.apache.thrift.TBase<ping2_args, ping2_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping2_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping2_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping2_args.class, metaDataMap);
    }

    public ping2_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping2_args(ping2_args other) {
    }

    public ping2_args deepCopy() {
      return new ping2_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping2_args)
        return this.equals((ping2_args)that);
      return false;
    }

    public boolean equals(ping2_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping2_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping2_argsStandardSchemeFactory implements SchemeFactory {
      public ping2_argsStandardScheme getScheme() {
        return new ping2_argsStandardScheme();
      }
    }

    private static class ping2_argsStandardScheme extends StandardScheme<ping2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping2_argsTupleSchemeFactory implements SchemeFactory {
      public ping2_argsTupleScheme getScheme() {
        return new ping2_argsTupleScheme();
      }
    }

    private static class ping2_argsTupleScheme extends TupleScheme<ping2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping2_result implements org.apache.thrift.TBase<ping2_result, ping2_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping2_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping2_result.class, metaDataMap);
    }

    public ping2_result() {
    }

    public ping2_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping2_result(ping2_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping2_result deepCopy() {
      return new ping2_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping2_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping2_result)
        return this.equals((ping2_result)that);
      return false;
    }

    public boolean equals(ping2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping2_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping2_resultStandardSchemeFactory implements SchemeFactory {
      public ping2_resultStandardScheme getScheme() {
        return new ping2_resultStandardScheme();
      }
    }

    private static class ping2_resultStandardScheme extends StandardScheme<ping2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping2_resultTupleSchemeFactory implements SchemeFactory {
      public ping2_resultTupleScheme getScheme() {
        return new ping2_resultTupleScheme();
      }
    }

    private static class ping2_resultTupleScheme extends TupleScheme<ping2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

    private static final org.apache.thrift.protocol.TField _BLOOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_bloomName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField _ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("_item", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_argsTupleSchemeFactory());
    }

    public String _bloomName; // required
    public String _item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _BLOOM_NAME((short)1, "_bloomName"),
      _ITEM((short)2, "_item");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _BLOOM_NAME
            return _BLOOM_NAME;
          case 2: // _ITEM
            return _ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._BLOOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("_bloomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields._ITEM, new org.apache.thrift.meta_data.FieldMetaData("_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      String _bloomName,
      String _item)
    {
      this();
      this._bloomName = _bloomName;
      this._item = _item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      if (other.isSet_bloomName()) {
        this._bloomName = other._bloomName;
      }
      if (other.isSet_item()) {
        this._item = other._item;
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this._bloomName = null;
      this._item = null;
    }

    public String get_bloomName() {
      return this._bloomName;
    }

    public put_args set_bloomName(String _bloomName) {
      this._bloomName = _bloomName;
      return this;
    }

    public void unset_bloomName() {
      this._bloomName = null;
    }

    /** Returns true if field _bloomName is set (has been assigned a value) and false otherwise */
    public boolean isSet_bloomName() {
      return this._bloomName != null;
    }

    public void set_bloomNameIsSet(boolean value) {
      if (!value) {
        this._bloomName = null;
      }
    }

    public String get_item() {
      return this._item;
    }

    public put_args set_item(String _item) {
      this._item = _item;
      return this;
    }

    public void unset_item() {
      this._item = null;
    }

    /** Returns true if field _item is set (has been assigned a value) and false otherwise */
    public boolean isSet_item() {
      return this._item != null;
    }

    public void set_itemIsSet(boolean value) {
      if (!value) {
        this._item = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _BLOOM_NAME:
        if (value == null) {
          unset_bloomName();
        } else {
          set_bloomName((String)value);
        }
        break;

      case _ITEM:
        if (value == null) {
          unset_item();
        } else {
          set_item((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _BLOOM_NAME:
        return get_bloomName();

      case _ITEM:
        return get_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _BLOOM_NAME:
        return isSet_bloomName();
      case _ITEM:
        return isSet_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;

      boolean this_present__bloomName = true && this.isSet_bloomName();
      boolean that_present__bloomName = true && that.isSet_bloomName();
      if (this_present__bloomName || that_present__bloomName) {
        if (!(this_present__bloomName && that_present__bloomName))
          return false;
        if (!this._bloomName.equals(that._bloomName))
          return false;
      }

      boolean this_present__item = true && this.isSet_item();
      boolean that_present__item = true && that.isSet_item();
      if (this_present__item || that_present__item) {
        if (!(this_present__item && that_present__item))
          return false;
        if (!this._item.equals(that._item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_bloomName()).compareTo(other.isSet_bloomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_bloomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bloomName, other._bloomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_item()).compareTo(other.isSet_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._item, other._item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_args(");
      boolean first = true;

      sb.append("_bloomName:");
      if (this._bloomName == null) {
        sb.append("null");
      } else {
        sb.append(this._bloomName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_item:");
      if (this._item == null) {
        sb.append("null");
      } else {
        sb.append(this._item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends StandardScheme<put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _BLOOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._bloomName = iprot.readString();
                struct.set_bloomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._item = iprot.readString();
                struct.set_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._bloomName != null) {
          oprot.writeFieldBegin(_BLOOM_NAME_FIELD_DESC);
          oprot.writeString(struct._bloomName);
          oprot.writeFieldEnd();
        }
        if (struct._item != null) {
          oprot.writeFieldBegin(_ITEM_FIELD_DESC);
          oprot.writeString(struct._item);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends TupleScheme<put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_bloomName()) {
          optionals.set(0);
        }
        if (struct.isSet_item()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_bloomName()) {
          oprot.writeString(struct._bloomName);
        }
        if (struct.isSet_item()) {
          oprot.writeString(struct._item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._bloomName = iprot.readString();
          struct.set_bloomNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct._item = iprot.readString();
          struct.set_itemIsSet(true);
        }
      }
    }

  }

  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_resultTupleSchemeFactory());
    }

    public TBloomResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBloomResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      TBloomResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBloomResponse(other.success);
      }
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TBloomResponse getSuccess() {
      return this.success;
    }

    public put_result setSuccess(TBloomResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBloomResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends StandardScheme<put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBloomResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends TupleScheme<put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TBloomResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class mightContain_args implements org.apache.thrift.TBase<mightContain_args, mightContain_args._Fields>, java.io.Serializable, Cloneable, Comparable<mightContain_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mightContain_args");

    private static final org.apache.thrift.protocol.TField _BLOOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_bloomName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField _ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("_item", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mightContain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mightContain_argsTupleSchemeFactory());
    }

    public String _bloomName; // required
    public String _item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _BLOOM_NAME((short)1, "_bloomName"),
      _ITEM((short)2, "_item");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _BLOOM_NAME
            return _BLOOM_NAME;
          case 2: // _ITEM
            return _ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._BLOOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("_bloomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields._ITEM, new org.apache.thrift.meta_data.FieldMetaData("_item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mightContain_args.class, metaDataMap);
    }

    public mightContain_args() {
    }

    public mightContain_args(
      String _bloomName,
      String _item)
    {
      this();
      this._bloomName = _bloomName;
      this._item = _item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mightContain_args(mightContain_args other) {
      if (other.isSet_bloomName()) {
        this._bloomName = other._bloomName;
      }
      if (other.isSet_item()) {
        this._item = other._item;
      }
    }

    public mightContain_args deepCopy() {
      return new mightContain_args(this);
    }

    @Override
    public void clear() {
      this._bloomName = null;
      this._item = null;
    }

    public String get_bloomName() {
      return this._bloomName;
    }

    public mightContain_args set_bloomName(String _bloomName) {
      this._bloomName = _bloomName;
      return this;
    }

    public void unset_bloomName() {
      this._bloomName = null;
    }

    /** Returns true if field _bloomName is set (has been assigned a value) and false otherwise */
    public boolean isSet_bloomName() {
      return this._bloomName != null;
    }

    public void set_bloomNameIsSet(boolean value) {
      if (!value) {
        this._bloomName = null;
      }
    }

    public String get_item() {
      return this._item;
    }

    public mightContain_args set_item(String _item) {
      this._item = _item;
      return this;
    }

    public void unset_item() {
      this._item = null;
    }

    /** Returns true if field _item is set (has been assigned a value) and false otherwise */
    public boolean isSet_item() {
      return this._item != null;
    }

    public void set_itemIsSet(boolean value) {
      if (!value) {
        this._item = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _BLOOM_NAME:
        if (value == null) {
          unset_bloomName();
        } else {
          set_bloomName((String)value);
        }
        break;

      case _ITEM:
        if (value == null) {
          unset_item();
        } else {
          set_item((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _BLOOM_NAME:
        return get_bloomName();

      case _ITEM:
        return get_item();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _BLOOM_NAME:
        return isSet_bloomName();
      case _ITEM:
        return isSet_item();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mightContain_args)
        return this.equals((mightContain_args)that);
      return false;
    }

    public boolean equals(mightContain_args that) {
      if (that == null)
        return false;

      boolean this_present__bloomName = true && this.isSet_bloomName();
      boolean that_present__bloomName = true && that.isSet_bloomName();
      if (this_present__bloomName || that_present__bloomName) {
        if (!(this_present__bloomName && that_present__bloomName))
          return false;
        if (!this._bloomName.equals(that._bloomName))
          return false;
      }

      boolean this_present__item = true && this.isSet_item();
      boolean that_present__item = true && that.isSet_item();
      if (this_present__item || that_present__item) {
        if (!(this_present__item && that_present__item))
          return false;
        if (!this._item.equals(that._item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mightContain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_bloomName()).compareTo(other.isSet_bloomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_bloomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bloomName, other._bloomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_item()).compareTo(other.isSet_item());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_item()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._item, other._item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mightContain_args(");
      boolean first = true;

      sb.append("_bloomName:");
      if (this._bloomName == null) {
        sb.append("null");
      } else {
        sb.append(this._bloomName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_item:");
      if (this._item == null) {
        sb.append("null");
      } else {
        sb.append(this._item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mightContain_argsStandardSchemeFactory implements SchemeFactory {
      public mightContain_argsStandardScheme getScheme() {
        return new mightContain_argsStandardScheme();
      }
    }

    private static class mightContain_argsStandardScheme extends StandardScheme<mightContain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mightContain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _BLOOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._bloomName = iprot.readString();
                struct.set_bloomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._item = iprot.readString();
                struct.set_itemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mightContain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._bloomName != null) {
          oprot.writeFieldBegin(_BLOOM_NAME_FIELD_DESC);
          oprot.writeString(struct._bloomName);
          oprot.writeFieldEnd();
        }
        if (struct._item != null) {
          oprot.writeFieldBegin(_ITEM_FIELD_DESC);
          oprot.writeString(struct._item);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mightContain_argsTupleSchemeFactory implements SchemeFactory {
      public mightContain_argsTupleScheme getScheme() {
        return new mightContain_argsTupleScheme();
      }
    }

    private static class mightContain_argsTupleScheme extends TupleScheme<mightContain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mightContain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_bloomName()) {
          optionals.set(0);
        }
        if (struct.isSet_item()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSet_bloomName()) {
          oprot.writeString(struct._bloomName);
        }
        if (struct.isSet_item()) {
          oprot.writeString(struct._item);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mightContain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct._bloomName = iprot.readString();
          struct.set_bloomNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct._item = iprot.readString();
          struct.set_itemIsSet(true);
        }
      }
    }

  }

  public static class mightContain_result implements org.apache.thrift.TBase<mightContain_result, mightContain_result._Fields>, java.io.Serializable, Cloneable, Comparable<mightContain_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mightContain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mightContain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mightContain_resultTupleSchemeFactory());
    }

    public TBloomResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBloomResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mightContain_result.class, metaDataMap);
    }

    public mightContain_result() {
    }

    public mightContain_result(
      TBloomResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mightContain_result(mightContain_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBloomResponse(other.success);
      }
    }

    public mightContain_result deepCopy() {
      return new mightContain_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TBloomResponse getSuccess() {
      return this.success;
    }

    public mightContain_result setSuccess(TBloomResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBloomResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mightContain_result)
        return this.equals((mightContain_result)that);
      return false;
    }

    public boolean equals(mightContain_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mightContain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mightContain_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mightContain_resultStandardSchemeFactory implements SchemeFactory {
      public mightContain_resultStandardScheme getScheme() {
        return new mightContain_resultStandardScheme();
      }
    }

    private static class mightContain_resultStandardScheme extends StandardScheme<mightContain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mightContain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBloomResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mightContain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mightContain_resultTupleSchemeFactory implements SchemeFactory {
      public mightContain_resultTupleScheme getScheme() {
        return new mightContain_resultTupleScheme();
      }
    }

    private static class mightContain_resultTupleScheme extends TupleScheme<mightContain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mightContain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mightContain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TBloomResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class initBloom_args implements org.apache.thrift.TBase<initBloom_args, initBloom_args._Fields>, java.io.Serializable, Cloneable, Comparable<initBloom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBloom_args");

    private static final org.apache.thrift.protocol.TField _SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("_secret", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField _BLOOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("_bloomName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField _NUM_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("_numItems", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField _EXPECTED_FPP_FIELD_DESC = new org.apache.thrift.protocol.TField("_expectedFpp", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField _FORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("_force", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField _COUNTING_FIELD_DESC = new org.apache.thrift.protocol.TField("_counting", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField _SCALING_FIELD_DESC = new org.apache.thrift.protocol.TField("_scaling", org.apache.thrift.protocol.TType.BOOL, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBloom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBloom_argsTupleSchemeFactory());
    }

    public String _secret; // required
    public String _bloomName; // required
    public long _numItems; // required
    public double _expectedFpp; // required
    public boolean _force; // required
    public boolean _counting; // required
    public boolean _scaling; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _SECRET((short)1, "_secret"),
      _BLOOM_NAME((short)2, "_bloomName"),
      _NUM_ITEMS((short)3, "_numItems"),
      _EXPECTED_FPP((short)4, "_expectedFpp"),
      _FORCE((short)5, "_force"),
      _COUNTING((short)6, "_counting"),
      _SCALING((short)7, "_scaling");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _SECRET
            return _SECRET;
          case 2: // _BLOOM_NAME
            return _BLOOM_NAME;
          case 3: // _NUM_ITEMS
            return _NUM_ITEMS;
          case 4: // _EXPECTED_FPP
            return _EXPECTED_FPP;
          case 5: // _FORCE
            return _FORCE;
          case 6: // _COUNTING
            return _COUNTING;
          case 7: // _SCALING
            return _SCALING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int ___NUMITEMS_ISSET_ID = 0;
    private static final int ___EXPECTEDFPP_ISSET_ID = 1;
    private static final int ___FORCE_ISSET_ID = 2;
    private static final int ___COUNTING_ISSET_ID = 3;
    private static final int ___SCALING_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._SECRET, new org.apache.thrift.meta_data.FieldMetaData("_secret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields._BLOOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("_bloomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields._NUM_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("_numItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields._EXPECTED_FPP, new org.apache.thrift.meta_data.FieldMetaData("_expectedFpp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields._FORCE, new org.apache.thrift.meta_data.FieldMetaData("_force", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields._COUNTING, new org.apache.thrift.meta_data.FieldMetaData("_counting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields._SCALING, new org.apache.thrift.meta_data.FieldMetaData("_scaling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBloom_args.class, metaDataMap);
    }

    public initBloom_args() {
    }

    public initBloom_args(
      String _secret,
      String _bloomName,
      long _numItems,
      double _expectedFpp,
      boolean _force,
      boolean _counting,
      boolean _scaling)
    {
      this();
      this._secret = _secret;
      this._bloomName = _bloomName;
      this._numItems = _numItems;
      set_numItemsIsSet(true);
      this._expectedFpp = _expectedFpp;
      set_expectedFppIsSet(true);
      this._force = _force;
      set_forceIsSet(true);
      this._counting = _counting;
      set_countingIsSet(true);
      this._scaling = _scaling;
      set_scalingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBloom_args(initBloom_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSet_secret()) {
        this._secret = other._secret;
      }
      if (other.isSet_bloomName()) {
        this._bloomName = other._bloomName;
      }
      this._numItems = other._numItems;
      this._expectedFpp = other._expectedFpp;
      this._force = other._force;
      this._counting = other._counting;
      this._scaling = other._scaling;
    }

    public initBloom_args deepCopy() {
      return new initBloom_args(this);
    }

    @Override
    public void clear() {
      this._secret = null;
      this._bloomName = null;
      set_numItemsIsSet(false);
      this._numItems = 0;
      set_expectedFppIsSet(false);
      this._expectedFpp = 0.0;
      set_forceIsSet(false);
      this._force = false;
      set_countingIsSet(false);
      this._counting = false;
      set_scalingIsSet(false);
      this._scaling = false;
    }

    public String get_secret() {
      return this._secret;
    }

    public initBloom_args set_secret(String _secret) {
      this._secret = _secret;
      return this;
    }

    public void unset_secret() {
      this._secret = null;
    }

    /** Returns true if field _secret is set (has been assigned a value) and false otherwise */
    public boolean isSet_secret() {
      return this._secret != null;
    }

    public void set_secretIsSet(boolean value) {
      if (!value) {
        this._secret = null;
      }
    }

    public String get_bloomName() {
      return this._bloomName;
    }

    public initBloom_args set_bloomName(String _bloomName) {
      this._bloomName = _bloomName;
      return this;
    }

    public void unset_bloomName() {
      this._bloomName = null;
    }

    /** Returns true if field _bloomName is set (has been assigned a value) and false otherwise */
    public boolean isSet_bloomName() {
      return this._bloomName != null;
    }

    public void set_bloomNameIsSet(boolean value) {
      if (!value) {
        this._bloomName = null;
      }
    }

    public long get_numItems() {
      return this._numItems;
    }

    public initBloom_args set_numItems(long _numItems) {
      this._numItems = _numItems;
      set_numItemsIsSet(true);
      return this;
    }

    public void unset_numItems() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___NUMITEMS_ISSET_ID);
    }

    /** Returns true if field _numItems is set (has been assigned a value) and false otherwise */
    public boolean isSet_numItems() {
      return EncodingUtils.testBit(__isset_bitfield, ___NUMITEMS_ISSET_ID);
    }

    public void set_numItemsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___NUMITEMS_ISSET_ID, value);
    }

    public double get_expectedFpp() {
      return this._expectedFpp;
    }

    public initBloom_args set_expectedFpp(double _expectedFpp) {
      this._expectedFpp = _expectedFpp;
      set_expectedFppIsSet(true);
      return this;
    }

    public void unset_expectedFpp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___EXPECTEDFPP_ISSET_ID);
    }

    /** Returns true if field _expectedFpp is set (has been assigned a value) and false otherwise */
    public boolean isSet_expectedFpp() {
      return EncodingUtils.testBit(__isset_bitfield, ___EXPECTEDFPP_ISSET_ID);
    }

    public void set_expectedFppIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___EXPECTEDFPP_ISSET_ID, value);
    }

    public boolean is_force() {
      return this._force;
    }

    public initBloom_args set_force(boolean _force) {
      this._force = _force;
      set_forceIsSet(true);
      return this;
    }

    public void unset_force() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___FORCE_ISSET_ID);
    }

    /** Returns true if field _force is set (has been assigned a value) and false otherwise */
    public boolean isSet_force() {
      return EncodingUtils.testBit(__isset_bitfield, ___FORCE_ISSET_ID);
    }

    public void set_forceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___FORCE_ISSET_ID, value);
    }

    public boolean is_counting() {
      return this._counting;
    }

    public initBloom_args set_counting(boolean _counting) {
      this._counting = _counting;
      set_countingIsSet(true);
      return this;
    }

    public void unset_counting() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___COUNTING_ISSET_ID);
    }

    /** Returns true if field _counting is set (has been assigned a value) and false otherwise */
    public boolean isSet_counting() {
      return EncodingUtils.testBit(__isset_bitfield, ___COUNTING_ISSET_ID);
    }

    public void set_countingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___COUNTING_ISSET_ID, value);
    }

    public boolean is_scaling() {
      return this._scaling;
    }

    public initBloom_args set_scaling(boolean _scaling) {
      this._scaling = _scaling;
      set_scalingIsSet(true);
      return this;
    }

    public void unset_scaling() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, ___SCALING_ISSET_ID);
    }

    /** Returns true if field _scaling is set (has been assigned a value) and false otherwise */
    public boolean isSet_scaling() {
      return EncodingUtils.testBit(__isset_bitfield, ___SCALING_ISSET_ID);
    }

    public void set_scalingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, ___SCALING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _SECRET:
        if (value == null) {
          unset_secret();
        } else {
          set_secret((String)value);
        }
        break;

      case _BLOOM_NAME:
        if (value == null) {
          unset_bloomName();
        } else {
          set_bloomName((String)value);
        }
        break;

      case _NUM_ITEMS:
        if (value == null) {
          unset_numItems();
        } else {
          set_numItems((Long)value);
        }
        break;

      case _EXPECTED_FPP:
        if (value == null) {
          unset_expectedFpp();
        } else {
          set_expectedFpp((Double)value);
        }
        break;

      case _FORCE:
        if (value == null) {
          unset_force();
        } else {
          set_force((Boolean)value);
        }
        break;

      case _COUNTING:
        if (value == null) {
          unset_counting();
        } else {
          set_counting((Boolean)value);
        }
        break;

      case _SCALING:
        if (value == null) {
          unset_scaling();
        } else {
          set_scaling((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _SECRET:
        return get_secret();

      case _BLOOM_NAME:
        return get_bloomName();

      case _NUM_ITEMS:
        return Long.valueOf(get_numItems());

      case _EXPECTED_FPP:
        return Double.valueOf(get_expectedFpp());

      case _FORCE:
        return Boolean.valueOf(is_force());

      case _COUNTING:
        return Boolean.valueOf(is_counting());

      case _SCALING:
        return Boolean.valueOf(is_scaling());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _SECRET:
        return isSet_secret();
      case _BLOOM_NAME:
        return isSet_bloomName();
      case _NUM_ITEMS:
        return isSet_numItems();
      case _EXPECTED_FPP:
        return isSet_expectedFpp();
      case _FORCE:
        return isSet_force();
      case _COUNTING:
        return isSet_counting();
      case _SCALING:
        return isSet_scaling();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBloom_args)
        return this.equals((initBloom_args)that);
      return false;
    }

    public boolean equals(initBloom_args that) {
      if (that == null)
        return false;

      boolean this_present__secret = true && this.isSet_secret();
      boolean that_present__secret = true && that.isSet_secret();
      if (this_present__secret || that_present__secret) {
        if (!(this_present__secret && that_present__secret))
          return false;
        if (!this._secret.equals(that._secret))
          return false;
      }

      boolean this_present__bloomName = true && this.isSet_bloomName();
      boolean that_present__bloomName = true && that.isSet_bloomName();
      if (this_present__bloomName || that_present__bloomName) {
        if (!(this_present__bloomName && that_present__bloomName))
          return false;
        if (!this._bloomName.equals(that._bloomName))
          return false;
      }

      boolean this_present__numItems = true;
      boolean that_present__numItems = true;
      if (this_present__numItems || that_present__numItems) {
        if (!(this_present__numItems && that_present__numItems))
          return false;
        if (this._numItems != that._numItems)
          return false;
      }

      boolean this_present__expectedFpp = true;
      boolean that_present__expectedFpp = true;
      if (this_present__expectedFpp || that_present__expectedFpp) {
        if (!(this_present__expectedFpp && that_present__expectedFpp))
          return false;
        if (this._expectedFpp != that._expectedFpp)
          return false;
      }

      boolean this_present__force = true;
      boolean that_present__force = true;
      if (this_present__force || that_present__force) {
        if (!(this_present__force && that_present__force))
          return false;
        if (this._force != that._force)
          return false;
      }

      boolean this_present__counting = true;
      boolean that_present__counting = true;
      if (this_present__counting || that_present__counting) {
        if (!(this_present__counting && that_present__counting))
          return false;
        if (this._counting != that._counting)
          return false;
      }

      boolean this_present__scaling = true;
      boolean that_present__scaling = true;
      if (this_present__scaling || that_present__scaling) {
        if (!(this_present__scaling && that_present__scaling))
          return false;
        if (this._scaling != that._scaling)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initBloom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_secret()).compareTo(other.isSet_secret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_secret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._secret, other._secret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_bloomName()).compareTo(other.isSet_bloomName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_bloomName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bloomName, other._bloomName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_numItems()).compareTo(other.isSet_numItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_numItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._numItems, other._numItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_expectedFpp()).compareTo(other.isSet_expectedFpp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_expectedFpp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._expectedFpp, other._expectedFpp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_force()).compareTo(other.isSet_force());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_force()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._force, other._force);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_counting()).compareTo(other.isSet_counting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_counting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._counting, other._counting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet_scaling()).compareTo(other.isSet_scaling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_scaling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._scaling, other._scaling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBloom_args(");
      boolean first = true;

      sb.append("_secret:");
      if (this._secret == null) {
        sb.append("null");
      } else {
        sb.append(this._secret);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_bloomName:");
      if (this._bloomName == null) {
        sb.append("null");
      } else {
        sb.append(this._bloomName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("_numItems:");
      sb.append(this._numItems);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_expectedFpp:");
      sb.append(this._expectedFpp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_force:");
      sb.append(this._force);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_counting:");
      sb.append(this._counting);
      first = false;
      if (!first) sb.append(", ");
      sb.append("_scaling:");
      sb.append(this._scaling);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBloom_argsStandardSchemeFactory implements SchemeFactory {
      public initBloom_argsStandardScheme getScheme() {
        return new initBloom_argsStandardScheme();
      }
    }

    private static class initBloom_argsStandardScheme extends StandardScheme<initBloom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBloom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._secret = iprot.readString();
                struct.set_secretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // _BLOOM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._bloomName = iprot.readString();
                struct.set_bloomNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // _NUM_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct._numItems = iprot.readI64();
                struct.set_numItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // _EXPECTED_FPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct._expectedFpp = iprot.readDouble();
                struct.set_expectedFppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // _FORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._force = iprot.readBool();
                struct.set_forceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // _COUNTING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._counting = iprot.readBool();
                struct.set_countingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // _SCALING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct._scaling = iprot.readBool();
                struct.set_scalingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBloom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._secret != null) {
          oprot.writeFieldBegin(_SECRET_FIELD_DESC);
          oprot.writeString(struct._secret);
          oprot.writeFieldEnd();
        }
        if (struct._bloomName != null) {
          oprot.writeFieldBegin(_BLOOM_NAME_FIELD_DESC);
          oprot.writeString(struct._bloomName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(_NUM_ITEMS_FIELD_DESC);
        oprot.writeI64(struct._numItems);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_EXPECTED_FPP_FIELD_DESC);
        oprot.writeDouble(struct._expectedFpp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_FORCE_FIELD_DESC);
        oprot.writeBool(struct._force);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_COUNTING_FIELD_DESC);
        oprot.writeBool(struct._counting);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(_SCALING_FIELD_DESC);
        oprot.writeBool(struct._scaling);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBloom_argsTupleSchemeFactory implements SchemeFactory {
      public initBloom_argsTupleScheme getScheme() {
        return new initBloom_argsTupleScheme();
      }
    }

    private static class initBloom_argsTupleScheme extends TupleScheme<initBloom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBloom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_secret()) {
          optionals.set(0);
        }
        if (struct.isSet_bloomName()) {
          optionals.set(1);
        }
        if (struct.isSet_numItems()) {
          optionals.set(2);
        }
        if (struct.isSet_expectedFpp()) {
          optionals.set(3);
        }
        if (struct.isSet_force()) {
          optionals.set(4);
        }
        if (struct.isSet_counting()) {
          optionals.set(5);
        }
        if (struct.isSet_scaling()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSet_secret()) {
          oprot.writeString(struct._secret);
        }
        if (struct.isSet_bloomName()) {
          oprot.writeString(struct._bloomName);
        }
        if (struct.isSet_numItems()) {
          oprot.writeI64(struct._numItems);
        }
        if (struct.isSet_expectedFpp()) {
          oprot.writeDouble(struct._expectedFpp);
        }
        if (struct.isSet_force()) {
          oprot.writeBool(struct._force);
        }
        if (struct.isSet_counting()) {
          oprot.writeBool(struct._counting);
        }
        if (struct.isSet_scaling()) {
          oprot.writeBool(struct._scaling);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBloom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct._secret = iprot.readString();
          struct.set_secretIsSet(true);
        }
        if (incoming.get(1)) {
          struct._bloomName = iprot.readString();
          struct.set_bloomNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct._numItems = iprot.readI64();
          struct.set_numItemsIsSet(true);
        }
        if (incoming.get(3)) {
          struct._expectedFpp = iprot.readDouble();
          struct.set_expectedFppIsSet(true);
        }
        if (incoming.get(4)) {
          struct._force = iprot.readBool();
          struct.set_forceIsSet(true);
        }
        if (incoming.get(5)) {
          struct._counting = iprot.readBool();
          struct.set_countingIsSet(true);
        }
        if (incoming.get(6)) {
          struct._scaling = iprot.readBool();
          struct.set_scalingIsSet(true);
        }
      }
    }

  }

  public static class initBloom_result implements org.apache.thrift.TBase<initBloom_result, initBloom_result._Fields>, java.io.Serializable, Cloneable, Comparable<initBloom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initBloom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initBloom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initBloom_resultTupleSchemeFactory());
    }

    public TBloomResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBloomResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initBloom_result.class, metaDataMap);
    }

    public initBloom_result() {
    }

    public initBloom_result(
      TBloomResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initBloom_result(initBloom_result other) {
      if (other.isSetSuccess()) {
        this.success = new TBloomResponse(other.success);
      }
    }

    public initBloom_result deepCopy() {
      return new initBloom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TBloomResponse getSuccess() {
      return this.success;
    }

    public initBloom_result setSuccess(TBloomResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TBloomResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initBloom_result)
        return this.equals((initBloom_result)that);
      return false;
    }

    public boolean equals(initBloom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(initBloom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initBloom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initBloom_resultStandardSchemeFactory implements SchemeFactory {
      public initBloom_resultStandardScheme getScheme() {
        return new initBloom_resultStandardScheme();
      }
    }

    private static class initBloom_resultStandardScheme extends StandardScheme<initBloom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initBloom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TBloomResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initBloom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initBloom_resultTupleSchemeFactory implements SchemeFactory {
      public initBloom_resultTupleScheme getScheme() {
        return new initBloom_resultTupleScheme();
      }
    }

    private static class initBloom_resultTupleScheme extends TupleScheme<initBloom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initBloom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initBloom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TBloomResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
